// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_queries.sql

package models

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password, email, full_name, date_of_birth) 
VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Username    string         `json:"username"`
	Password    string         `json:"password"`
	Email       string         `json:"email"`
	FullName    sql.NullString `json:"full_name"`
	DateOfBirth sql.NullTime   `json:"date_of_birth"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.FullName,
		arg.DateOfBirth,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, email, full_name, date_of_birth, created_at, updated_at 
FROM users 
WHERE user_id = ?
`

type GetUserRow struct {
	UserID      interface{}    `json:"user_id"`
	Username    string         `json:"username"`
	Email       string         `json:"email"`
	FullName    sql.NullString `json:"full_name"`
	DateOfBirth sql.NullTime   `json:"date_of_birth"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   interface{}    `json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, userID interface{}) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, username, email, full_name, date_of_birth, created_at, updated_at 
FROM users 
LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type ListUsersRow struct {
	UserID      interface{}    `json:"user_id"`
	Username    string         `json:"username"`
	Email       string         `json:"email"`
	FullName    sql.NullString `json:"full_name"`
	DateOfBirth sql.NullTime   `json:"date_of_birth"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   interface{}    `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.FullName,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
